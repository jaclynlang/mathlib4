/-
Copyright (c) 2018 Patrick Massot. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Patrick Massot, Johannes H√∂lzl, Ya√´l Dillies
-/
import Mathlib.Analysis.Normed.Group.Uniform
import Mathlib.Topology.Instances.NNReal
import Mathlib.Topology.Instances.Rat
import Mathlib.Topology.MetricSpace.Algebra
import Mathlib.Topology.MetricSpace.IsometricSMul
import Mathlib.Topology.Sequences

#align_import analysis.normed.group.basic from "leanprover-community/mathlib"@"41bef4ae1254365bc190aee63b947674d2977f01"

/-!
# Normed (semi)groups

In this file we define 10 classes:

* `Norm`, `NNNorm`: auxiliary classes endowing a type `Œ±` with a function `norm : Œ± ‚Üí ‚Ñù`
  (notation: `‚Äñx‚Äñ`) and `nnnorm : Œ± ‚Üí ‚Ñù‚â•0` (notation: `‚Äñx‚Äñ‚Çä`), respectively;
* `Seminormed...Group`: A seminormed (additive) (commutative) group is an (additive) (commutative)
  group with a norm and a compatible pseudometric space structure:
  `‚àÄ x y, dist x y = ‚Äñx / y‚Äñ` or `‚àÄ x y, dist x y = ‚Äñx - y‚Äñ`, depending on the group operation.
* `Normed...Group`: A normed (additive) (commutative) group is an (additive) (commutative) group
  with a norm and a compatible metric space structure.

We also prove basic properties of (semi)normed groups and provide some instances.

## TODO
This file is huge; move material into separate files,
such as `Mathlib/Analysis/Normed/Group/Lemmas.lean`.

## Notes

The current convention `dist x y = ‚Äñx - y‚Äñ` means that the distance is invariant under right
addition, but actions in mathlib are usually from the left. This means we might want to change it to
`dist x y = ‚Äñ-x + y‚Äñ`.

The normed group hierarchy would lend itself well to a mixin design (that is, having
`SeminormedGroup` and `SeminormedAddGroup` not extend `Group` and `AddGroup`), but we choose not
to for performance concerns.

## Tags

normed group
-/


variable {ùìï ùïú Œ± Œπ Œ∫ E F G : Type*}

open Filter Function Metric Bornology
open scoped ENNReal Filter NNReal Uniformity Pointwise Topology

section SeminormedCommGroup

variable [SeminormedCommGroup E] [SeminormedCommGroup F] {a a‚ÇÅ a‚ÇÇ b b‚ÇÅ b‚ÇÇ : E} {r r‚ÇÅ r‚ÇÇ : ‚Ñù}

open Finset

@[to_additive]
theorem controlled_prod_of_mem_closure {s : Subgroup E} (hg : a ‚àà closure (s : Set E)) {b : ‚Ñï ‚Üí ‚Ñù}
    (b_pos : ‚àÄ n, 0 < b n) :
    ‚àÉ v : ‚Ñï ‚Üí E,
      Tendsto (fun n => ‚àè i ‚àà range (n + 1), v i) atTop (ùìù a) ‚àß
        (‚àÄ n, v n ‚àà s) ‚àß ‚Äñv 0 / a‚Äñ < b 0 ‚àß ‚àÄ n, 0 < n ‚Üí ‚Äñv n‚Äñ < b n := by
  obtain ‚ü®u : ‚Ñï ‚Üí E, u_in : ‚àÄ n, u n ‚àà s, lim_u : Tendsto u atTop (ùìù a)‚ü© :=
    mem_closure_iff_seq_limit.mp hg
  obtain ‚ü®n‚ÇÄ, hn‚ÇÄ‚ü© : ‚àÉ n‚ÇÄ, ‚àÄ n ‚â• n‚ÇÄ, ‚Äñu n / a‚Äñ < b 0 :=
    haveI : { x | ‚Äñx / a‚Äñ < b 0 } ‚àà ùìù a := by
      simp_rw [‚Üê dist_eq_norm_div]
      exact Metric.ball_mem_nhds _ (b_pos _)
    Filter.tendsto_atTop'.mp lim_u _ this
  set z : ‚Ñï ‚Üí E := fun n => u (n + n‚ÇÄ)
  have lim_z : Tendsto z atTop (ùìù a) := lim_u.comp (tendsto_add_atTop_nat n‚ÇÄ)
  have mem_ùì§ : ‚àÄ n, { p : E √ó E | ‚Äñp.1 / p.2‚Äñ < b (n + 1) } ‚àà ùì§ E := fun n => by
    simpa [‚Üê dist_eq_norm_div] using Metric.dist_mem_uniformity (b_pos <| n + 1)
  obtain ‚ü®œÜ : ‚Ñï ‚Üí ‚Ñï, œÜ_extr : StrictMono œÜ, hœÜ : ‚àÄ n, ‚Äñz (œÜ <| n + 1) / z (œÜ n)‚Äñ < b (n + 1)‚ü© :=
    lim_z.cauchySeq.subseq_mem mem_ùì§
  set w : ‚Ñï ‚Üí E := z ‚àò œÜ
  have hw : Tendsto w atTop (ùìù a) := lim_z.comp œÜ_extr.tendsto_atTop
  set v : ‚Ñï ‚Üí E := fun i => if i = 0 then w 0 else w i / w (i - 1)
  refine ‚ü®v, Tendsto.congr (Finset.eq_prod_range_div' w) hw, ?_, hn‚ÇÄ _ (n‚ÇÄ.le_add_left _), ?_‚ü©
  ¬∑ rintro ‚ü®‚ü©
    ¬∑ change w 0 ‚àà s
      apply u_in
    ¬∑ apply s.div_mem <;> apply u_in
  ¬∑ intro l hl
    obtain ‚ü®k, rfl‚ü© : ‚àÉ k, l = k + 1 := Nat.exists_eq_succ_of_ne_zero hl.ne'
    apply hœÜ
#align controlled_prod_of_mem_closure controlled_prod_of_mem_closure
#align controlled_sum_of_mem_closure controlled_sum_of_mem_closure

@[to_additive]
theorem controlled_prod_of_mem_closure_range {j : E ‚Üí* F} {b : F}
    (hb : b ‚àà closure (j.range : Set F)) {f : ‚Ñï ‚Üí ‚Ñù} (b_pos : ‚àÄ n, 0 < f n) :
    ‚àÉ a : ‚Ñï ‚Üí E,
      Tendsto (fun n => ‚àè i ‚àà range (n + 1), j (a i)) atTop (ùìù b) ‚àß
        ‚Äñj (a 0) / b‚Äñ < f 0 ‚àß ‚àÄ n, 0 < n ‚Üí ‚Äñj (a n)‚Äñ < f n := by
  obtain ‚ü®v, sum_v, v_in, hv‚ÇÄ, hv_pos‚ü© := controlled_prod_of_mem_closure hb b_pos
  choose g hg using v_in
  exact
    ‚ü®g, by simpa [‚Üê hg] using sum_v, by simpa [hg 0] using hv‚ÇÄ,
      fun n hn => by simpa [hg] using hv_pos n hn‚ü©
#align controlled_prod_of_mem_closure_range controlled_prod_of_mem_closure_range
#align controlled_sum_of_mem_closure_range controlled_sum_of_mem_closure_range

namespace Int

instance instNormedAddCommGroup : NormedAddCommGroup ‚Ñ§ where
  norm n := ‚Äñ(n : ‚Ñù)‚Äñ
  dist_eq m n := by simp only [Int.dist_eq, norm, Int.cast_sub]

@[norm_cast]
theorem norm_cast_real (m : ‚Ñ§) : ‚Äñ(m : ‚Ñù)‚Äñ = ‚Äñm‚Äñ :=
  rfl
#align int.norm_cast_real Int.norm_cast_real

theorem norm_eq_abs (n : ‚Ñ§) : ‚Äñn‚Äñ = |(n : ‚Ñù)| :=
  rfl
#align int.norm_eq_abs Int.norm_eq_abs

@[simp]
theorem norm_natCast (n : ‚Ñï) : ‚Äñ(n : ‚Ñ§)‚Äñ = n := by simp [Int.norm_eq_abs]
#align int.norm_coe_nat Int.norm_natCast

@[deprecated (since := "2024-04-05")] alias norm_coe_nat := norm_natCast

theorem _root_.NNReal.natCast_natAbs (n : ‚Ñ§) : (n.natAbs : ‚Ñù‚â•0) = ‚Äñn‚Äñ‚Çä :=
  NNReal.eq <|
    calc
      ((n.natAbs : ‚Ñù‚â•0) : ‚Ñù) = (n.natAbs : ‚Ñ§) := by simp only [Int.cast_natCast, NNReal.coe_natCast]
      _ = |(n : ‚Ñù)| := by simp only [Int.natCast_natAbs, Int.cast_abs]
      _ = ‚Äñn‚Äñ := (norm_eq_abs n).symm
#align nnreal.coe_nat_abs NNReal.natCast_natAbs

theorem abs_le_floor_nnreal_iff (z : ‚Ñ§) (c : ‚Ñù‚â•0) : |z| ‚â§ ‚åäc‚åã‚Çä ‚Üî ‚Äñz‚Äñ‚Çä ‚â§ c := by
  rw [Int.abs_eq_natAbs, Int.ofNat_le, Nat.le_floor_iff (zero_le c), NNReal.natCast_natAbs z]
#align int.abs_le_floor_nnreal_iff Int.abs_le_floor_nnreal_iff

end Int

namespace Rat

instance instNormedAddCommGroup : NormedAddCommGroup ‚Ñö where
  norm r := ‚Äñ(r : ‚Ñù)‚Äñ
  dist_eq r‚ÇÅ r‚ÇÇ := by simp only [Rat.dist_eq, norm, Rat.cast_sub]

@[norm_cast, simp 1001]
-- Porting note: increase priority to prevent the left-hand side from simplifying
theorem norm_cast_real (r : ‚Ñö) : ‚Äñ(r : ‚Ñù)‚Äñ = ‚Äñr‚Äñ :=
  rfl
#align rat.norm_cast_real Rat.norm_cast_real

@[norm_cast, simp]
theorem _root_.Int.norm_cast_rat (m : ‚Ñ§) : ‚Äñ(m : ‚Ñö)‚Äñ = ‚Äñm‚Äñ := by
  rw [‚Üê Rat.norm_cast_real, ‚Üê Int.norm_cast_real]; congr 1
#align int.norm_cast_rat Int.norm_cast_rat

end Rat

-- Now that we've installed the norm on `‚Ñ§`,
-- we can state some lemmas about `zsmul`.
section

variable [SeminormedCommGroup Œ±]

@[to_additive norm_zsmul_le]
theorem norm_zpow_le_mul_norm (n : ‚Ñ§) (a : Œ±) : ‚Äña ^ n‚Äñ ‚â§ ‚Äñn‚Äñ * ‚Äña‚Äñ := by
  rcases n.eq_nat_or_neg with ‚ü®n, rfl | rfl‚ü© <;> simpa using norm_pow_le_mul_norm n a
#align norm_zpow_le_mul_norm norm_zpow_le_mul_norm
#align norm_zsmul_le norm_zsmul_le

@[to_additive nnnorm_zsmul_le]
theorem nnnorm_zpow_le_mul_norm (n : ‚Ñ§) (a : Œ±) : ‚Äña ^ n‚Äñ‚Çä ‚â§ ‚Äñn‚Äñ‚Çä * ‚Äña‚Äñ‚Çä := by
  simpa only [‚Üê NNReal.coe_le_coe, NNReal.coe_mul] using norm_zpow_le_mul_norm n a
#align nnnorm_zpow_le_mul_norm nnnorm_zpow_le_mul_norm
#align nnnorm_zsmul_le nnnorm_zsmul_le

end

end SeminormedCommGroup

/-! ### Subgroups of normed groups -/
namespace Subgroup

section SeminormedGroup

variable [SeminormedGroup E] {s : Subgroup E}

/-- A subgroup of a seminormed group is also a seminormed group,
with the restriction of the norm. -/
@[to_additive "A subgroup of a seminormed group is also a seminormed group, with the restriction of
the norm."]
instance seminormedGroup : SeminormedGroup s :=
  SeminormedGroup.induced _ _ s.subtype
#align subgroup.seminormed_group Subgroup.seminormedGroup
#align add_subgroup.seminormed_add_group AddSubgroup.seminormedAddGroup

/-- If `x` is an element of a subgroup `s` of a seminormed group `E`, its norm in `s` is equal to
its norm in `E`. -/
@[to_additive (attr := simp) "If `x` is an element of a subgroup `s` of a seminormed group `E`, its
norm in `s` is equal to its norm in `E`."]
theorem coe_norm (x : s) : ‚Äñx‚Äñ = ‚Äñ(x : E)‚Äñ :=
  rfl
#align subgroup.coe_norm Subgroup.coe_norm
#align add_subgroup.coe_norm AddSubgroup.coe_norm

/-- If `x` is an element of a subgroup `s` of a seminormed group `E`, its norm in `s` is equal to
its norm in `E`.

This is a reversed version of the `simp` lemma `Subgroup.coe_norm` for use by `norm_cast`. -/
@[to_additive (attr := norm_cast) "If `x` is an element of a subgroup `s` of a seminormed group `E`,
its norm in `s` is equal to its norm in `E`.

This is a reversed version of the `simp` lemma `AddSubgroup.coe_norm` for use by `norm_cast`."]
theorem norm_coe {s : Subgroup E} (x : s) : ‚Äñ(x : E)‚Äñ = ‚Äñx‚Äñ :=
  rfl
#align subgroup.norm_coe Subgroup.norm_coe
#align add_subgroup.norm_coe AddSubgroup.norm_coe

end SeminormedGroup

@[to_additive]
instance seminormedCommGroup [SeminormedCommGroup E] {s : Subgroup E} : SeminormedCommGroup s :=
  SeminormedCommGroup.induced _ _ s.subtype
#align subgroup.seminormed_comm_group Subgroup.seminormedCommGroup
#align add_subgroup.seminormed_add_comm_group AddSubgroup.seminormedAddCommGroup

@[to_additive]
instance normedGroup [NormedGroup E] {s : Subgroup E} : NormedGroup s :=
  NormedGroup.induced _ _ s.subtype Subtype.coe_injective
#align subgroup.normed_group Subgroup.normedGroup
#align add_subgroup.normed_add_group AddSubgroup.normedAddGroup

@[to_additive]
instance normedCommGroup [NormedCommGroup E] {s : Subgroup E} : NormedCommGroup s :=
  NormedCommGroup.induced _ _ s.subtype Subtype.coe_injective
#align subgroup.normed_comm_group Subgroup.normedCommGroup
#align add_subgroup.normed_add_comm_group AddSubgroup.normedAddCommGroup

end Subgroup

/-! ### Submodules of normed groups -/


namespace Submodule

-- See note [implicit instance arguments]
/-- A submodule of a seminormed group is also a seminormed group, with the restriction of the norm.
-/
instance seminormedAddCommGroup [Ring ùïú] [SeminormedAddCommGroup E] [Module ùïú E]
    (s : Submodule ùïú E) : SeminormedAddCommGroup s :=
  SeminormedAddCommGroup.induced _ _ s.subtype.toAddMonoidHom
#align submodule.seminormed_add_comm_group Submodule.seminormedAddCommGroup

-- See note [implicit instance arguments].
/-- If `x` is an element of a submodule `s` of a normed group `E`, its norm in `s` is equal to its
norm in `E`. -/
@[simp]
theorem coe_norm [Ring ùïú] [SeminormedAddCommGroup E] [Module ùïú E] {s : Submodule ùïú E}
    (x : s) : ‚Äñx‚Äñ = ‚Äñ(x : E)‚Äñ :=
  rfl
#align submodule.coe_norm Submodule.coe_norm

-- See note [implicit instance arguments].
/-- If `x` is an element of a submodule `s` of a normed group `E`, its norm in `E` is equal to its
norm in `s`.

This is a reversed version of the `simp` lemma `Submodule.coe_norm` for use by `norm_cast`. -/
@[norm_cast]
theorem norm_coe [Ring ùïú] [SeminormedAddCommGroup E] [Module ùïú E] {s : Submodule ùïú E}
    (x : s) : ‚Äñ(x : E)‚Äñ = ‚Äñx‚Äñ :=
  rfl
#align submodule.norm_coe Submodule.norm_coe

-- See note [implicit instance arguments].
/-- A submodule of a normed group is also a normed group, with the restriction of the norm. -/
instance normedAddCommGroup [Ring ùïú] [NormedAddCommGroup E] [Module ùïú E]
    (s : Submodule ùïú E) : NormedAddCommGroup s :=
  { Submodule.seminormedAddCommGroup s with
    eq_of_dist_eq_zero := eq_of_dist_eq_zero }

end Submodule

section NNReal

variable [SeminormedAddCommGroup E]

theorem eventually_nnnorm_sub_lt (x‚ÇÄ : E) {Œµ : ‚Ñù‚â•0} (Œµ_pos : 0 < Œµ) :
    ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚Äñx - x‚ÇÄ‚Äñ‚Çä < Œµ :=
  (continuousAt_id.sub continuousAt_const).nnnorm (gt_mem_nhds <| by simpa)

theorem eventually_norm_sub_lt (x‚ÇÄ : E) {Œµ : ‚Ñù} (Œµ_pos : 0 < Œµ) :
    ‚àÄ·∂† x in ùìù x‚ÇÄ, ‚Äñx - x‚ÇÄ‚Äñ < Œµ :=
  (continuousAt_id.sub continuousAt_const).norm (gt_mem_nhds <| by simpa)

end NNReal
